«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION com::avaloq::tools::ddk::xtext::generator::builder::StandaloneBuilderIntegrationFragment»

«DEFINE generate(List[String] modelFileExtensions) FOR Grammar»
«EXPAND generateBuildSetup FOR this»
«EXPAND generateBuildService FOR this»
«EXPAND generateServiceRegistration FOR this»
«ENDDEFINE»

«DEFINE generateServiceRegistration FOR Grammar»
«FILE "META-INF/services/com.avaloq.tools.ddk.xtext.build.IDynamicSetupService" SRC_GEN-»
«name.toJavaPackage()».«name.toSimpleName()»StandaloneBuildSetupService

«ENDFILE»
«ENDDEFINE»

«DEFINE generateBuildService FOR Grammar»
«FILE name.asPath()+"StandaloneBuildSetupService.java" SRC_GEN-»
package «name.toJavaPackage()»;

import java.util.List;

import com.avaloq.tools.ddk.xtext.build.AbstractDynamicSetupService;
import com.google.common.collect.ImmutableList;
import com.google.inject.Injector;
import com.google.inject.Module;

/**
 * Generated by com.avaloq.tools.ddk.xtext.generator.builder.StandaloneBuilderIntegrationFragment.
 */
public class «name.toSimpleName()»StandaloneBuildSetupService extends AbstractDynamicSetupService {

  @SuppressWarnings("nls")
  private static final String GRAMMAR = "«this.name»";
  @SuppressWarnings("nls")
  private static final List<String> PARENTS = ImmutableList.of(//
     «FOREACH allUsedGrammars() AS g SEPARATOR '
    ,'»"«g.name»" //«ENDFOREACH»
  );

  public Injector doSetup(Module overrideModule, Module... additionalModules) {
    return new «name.toSimpleName()»StandaloneBuildSetupGenerated(SETUP_LOCK, overrideModule, additionalModules).createInjectorAndDoEMFRegistration();
  }

  @Override
  public List<String> getParentLanguages() {
    return PARENTS;
  }

  @Override
  public String getLanguageName() {
    return GRAMMAR;
  }

}
«ENDFILE»
«ENDDEFINE»

«DEFINE generateBuildSetup FOR Grammar»
«FILE name.asPath()+"StandaloneBuildSetupGenerated.java" SRC_GEN-»
package «name.toJavaPackage()»;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;
import com.google.inject.util.Modules;


/**
 * Generated by com.avaloq.tools.ddk.xtext.generator.builder.StandaloneBuilderIntegrationFragment.
 */
public class «name.toSimpleName()»StandaloneBuildSetupGenerated extends «name.toSimpleName()»StandaloneSetup {

  private final Module overrideModule;
  private final Module[] additionalModules;
  private final Object lock;

  public «name.toSimpleName()»StandaloneBuildSetupGenerated(final Object lock, final Module overrideModule, Module... additionalModules) {
    this.lock = lock;
    this.overrideModule = overrideModule;
    this.additionalModules = additionalModules;
  }

  public «name.toSimpleName()»StandaloneBuildSetupGenerated(final Module overrideModule, Module... additionalModules) {
    this.lock = null;
    this.overrideModule = overrideModule;
    this.additionalModules = additionalModules;
  }

  @Override
  public Injector createInjectorAndDoEMFRegistration() {
    registerEPackages();
    Injector injector = createInjector();
    if (lock != null) {
      synchronized (lock) {
        register(injector);
      }
    } else {
      register(injector);
    }
    return injector;
  }

  @Override
  public Injector createInjector() {
    return Guice.createInjector(getModules());
  }

  protected void registerEPackages() {
  «FOREACH metamodelDeclarations.typeSelect(GeneratedMetamodel) AS mmd-»
    if («getNamespace()».«mmd.name».«mmd.name.toFirstUpper()»Package.eINSTANCE == null) {
      throw new IllegalStateException("EPackage could not be initialized: " + «getNamespace()».«mmd.name».«mmd.name.toFirstUpper()»Package.eNS_URI); //$NON-NLS-1$
    }
  «ENDFOREACH-»
  }

  protected Iterable<Module> getModules() {
    return ImmutableList.<Module> builder().add(Modules.override(new «name»RuntimeModule()).with(overrideModule)).add(additionalModules).build();
  }

}
«ENDFILE»
«ENDDEFINE»

«DEFINE addToPluginXmlRt(List[String] modelFileExtensions) FOR Grammar»«ENDDEFINE»

«DEFINE addToPluginXmlUi(List[String] modelFileExtensions) FOR Grammar»«ENDDEFINE»

«DEFINE addToStandaloneSetup(List[String] modelFileExtensions) FOR Grammar»«ENDDEFINE»

«REM»EXPERIMENTAL support for OSGi builder«ENDREM»
«DEFINE addToStandaloneBuilderPluginXml(List[String] modelFileExtensions) FOR Grammar»
«FILE getStandaloneBuilderPluginXmlGenFile() STANDALONE_BUILDER-»
  <!-- adding extensions for «name» -->
«FOREACH modelFileExtensions AS ext-»
  <extension
    point="org.eclipse.emf.ecore.extension_parser">
    <parser
      class="com.avaloq.tools.ddk.acf.builder.osgi.ExecutableExtensionFactory:«name»:org.eclipse.xtext.resource.IResourceFactory"
      type="«ext»">
    </parser>
  </extension>
  <extension point="org.eclipse.xtext.extension_resourceServiceProvider">
        <resourceServiceProvider
            class="com.avaloq.tools.ddk.acf.builder.osgi.ExecutableExtensionFactory:«name»:org.eclipse.xtext.resource.IResourceServiceProvider"
            uriExtension="«ext»">
        </resourceServiceProvider>
    </extension>
«ENDFOREACH»
«ENDFILE»
«ENDDEFINE»
